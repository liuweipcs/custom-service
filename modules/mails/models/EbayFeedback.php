<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/4/27 0027
 * Time: 下午 5:01
 */

namespace app\modules\mails\models;

use app\modules\accounts\models\Account;
use app\modules\accounts\models\Platform;
use app\modules\accounts\models\UserAccount;
use app\modules\orders\models\Logistic;
use app\modules\orders\models\Warehouse;
use app\modules\systems\models\Country;
use app\modules\users\models\User;
use yii\helpers\Url;
use app\modules\systems\models\BasicConfig;
use app\modules\mails\models\EbayInboxSubject;
use app\modules\orders\models\Order;
use app\modules\orders\models\OrderEbay;
use yii\db\Query;

class EbayFeedback extends MailsModel
{
    public static $commentTypeMap = [1 => 'IndependentlyWithdrawn', 2 => 'Negative', 3 => 'Neutral', 4 => 'Positive', 5 => 'Withdrawn'];
    public static $roleMap = [1 => 'Seller', 2 => 'Buyer'];

    /*    public static $repliedStatus =[1=>'已回复'];

        const FEEDBACK_STATUS = 1;      //已回复*/

    public static function tableName()
    {
        return '{{%ebay_feedback}}'; // TODO: Change the autogenerated stub
    }

    public function attributeLabels()
    {
        return [
            'commenting_user' => '评论用户',
            'commenting_user_score' => '评分/级别/内容',
            'comment_text' => '评论内容',
            'comment_time' => '评论时间',
            'comment_type' => '评价级别',
            'item_id' => 'ItemID',
            'item_title' => '产品名称',
            'item_price' => '产品价格',
            'currency' => '货币',
            'role' => '接受评价方',
            'feedback_id' => '评价ID',
            'transaction_id' => '交易ID',
            'order_line_item_id' => '平台订单号',
            'feedback_response' => '评价回复',
            'account_id' => 'eBay账号',
            'siteid' => '站点',
            'create_by' => '创建者',
            'create_time' => '创建时间',
            'modify_by' => '修改者',
            'modify_time' => '修改时间',
            'status' => '是否回复',
            'message' => '是否有站内信',
            'department_id' => '责任归属部门/原因',
            'reason_id' => '差评原因',
            'step_id' => '跟进状态/备注',
            'remark' => '备注',
            'send_link_time' => '改评链接发送时间',
            'sku' => 'SKU',
            'order_id' => '订单号',
            'warehouse_id' => '发货仓库',
            'shipped_date' => '发货日期',
            'ship_country' => '国家/Item Location',
            'ship_code' => '发货方式ID',
            'logistics' => '发货方式/仓库',
            'location' => 'Item Location',
            'warehouse' => '发货仓库',
            'pay_time' => '付款时间',
            'ship_date_start_time' => '发货开始日期',
            'ship_date_end_time' => '发货截至日期',
            'time_list' => '时间',
            'eb_order_id' => '系统订单号',
        ];
    }

    public function attributes()
    {
        $attr = parent::attributes();
        $extra = ['message'];
        $extra[] = 'warehouse_id';
        $extra[] = 'warehouse';
        $extra[] = 'logistics';
        $extra[] = 'ship_code';
        $extra[] = 'ship_country';
        $extra[] = 'shipped_date';
        $extra[] = 'location';
        $extra[] = 'platform_order_id_old';
        $extra[] = 'pay_time';
        $extra[] = 'time_list';
        $extra[] = 'eb_order_id';
        return array_merge($attr, $extra);
    }

    public function dynamicChangeFilter(&$filterOptions, &$query, &$params)
    {
        if (!empty($params['start_time']) && !empty($params['end_time'])) {
            $query->andWhere(['between', 'comment_time', $params['start_time'], $params['end_time']]);
        } else if (!empty($params['start_time'])) {
            $query->andWhere(['>=', 'comment_time', $params['start_time']]);
        } else if (!empty($params['end_time'])) {
            $query->andWhere(['<=', 'comment_time', $params['end_time']]);
        }
    }

    public function searchList($params = [])
    {
        $query = self::find();
        $sort = new \yii\data\Sort();
        $sort->defaultOrder = array(
            'send_link_time' => SORT_DESC,
            'comment_time' => SORT_DESC,
            'id' => SORT_ASC,
        );

        // 只能查询到客服绑定账号的回复
        $accountIds = UserAccount::getCurrentUserPlatformAccountIds(Platform::PLATFORM_CODE_EB);
        $query->andWhere(['in', 'account_id', $accountIds]);
        $query->andWhere(['role' => 1]);
        if (!empty($params['sku'])) {
            //通过sku查询item_id
            $itemIds = Order::getEbayFeedBackItemIdBySku([
                'sku' => $params['sku'],
            ]);

            if (!empty($itemIds)) {
                $query->andWhere(['in', 'item_id', $itemIds]);
            }

            unset($params['sku']);
        }

        //查询ebay订单表得平台订单号
        if (!empty($params['order_id'])) {
            $platform_order_id = OrderEbay::getPlatform($params['order_id']);
            if (!empty($platform_order_id)) {

                $query->andWhere(['order_line_item_id' => $platform_order_id]);
            }
            unset($params['order_id']);
        }

        //如果设置有隐藏查询条件 则添加隐藏查询条件
        if (isset($params['hidden_val']) && !empty($params['hidden_val'])) {
            switch ($params['hidden_val']) {
                case 1://纠纷超过30天条件
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') > DATE_FORMAT(date_add(DATE_FORMAT(comment_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 1 MONTH),'%Y-%m-%d %H:%i:%s')");
                    break;
                case 2://改评链接发送5天未修改
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') > DATE_FORMAT(date_add(DATE_FORMAT(send_link_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 5 day),'%Y-%m-%d %H:%i:%s')");
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(date_add(DATE_FORMAT(send_link_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 8 day),'%Y-%m-%d %H:%i:%s')");
                    break;
                case 3://改评链接发送8天未修改
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') > DATE_FORMAT(date_add(DATE_FORMAT(send_link_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 8 day),'%Y-%m-%d %H:%i:%s')");
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') <= DATE_FORMAT(date_add(DATE_FORMAT(send_link_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 10 day),'%Y-%m-%d %H:%i:%s')");
                    break;
                case 4://超时未修改(超过10天)
                    $query->andWhere("DATE_FORMAT(now(),'%Y-%m-%d %H:%i:%s') > DATE_FORMAT(date_add(DATE_FORMAT(send_link_time,'%Y-%m-%d %H:%i:%s'), INTERVAL 10 day),'%Y-%m-%d %H:%i:%s')");
                    break;
            }
        }
        $dataProvider = parent::search($query, $sort, $params);

        $models = $dataProvider->getModels();
        $this->addition($models);
        $dataProvider->setModels($models);
        return $dataProvider;
    }

    public function addition(&$models)
    {
        $allConfig = BasicConfig::getAllConfigData();
        $platform_order_id_arr = [];
        $orderId_arr = [];
        $warehouseList = Warehouse::getAllWarehouseList(true);
        $countryList = Country::getCodeNamePairs('cn_name');
        foreach ($models as $model) {
            $model->comment_type = self::$commentTypeMap[$model->comment_type];
            $model->role = self::$roleMap[$model->role];
            $model->status = $this->statusShow($model->status, $model->feedback_id);
            if (empty($model->order_line_item_id)) {
                $order_id = $model->item_id . '-' . $model->transaction_id;

            } else {
                $order_id = $model->order_line_item_id;
            }
            //平台订单id
            $model->platform_order_id_old = $order_id;
            $platform_order_id_arr[] = $order_id;

            $model->order_line_item_id = '<a _width="100%" _height ="100%"  class="edit-button" href="' . Url::toRoute(['/orders/order/orderdetails', 'order_id' => $order_id, 'platform' => 'EB', 'transaction_id' => $model->transaction_id]) . '">' . $order_id . '</a>';

            $subject_model = EbayInboxSubject::find()->where(['buyer_id' => $model->commenting_user, 'item_id' => $model->item_id, 'account_id' => $model->account_id])->one();
            if ($subject_model) {
                $model->setAttribute('message', '&nbsp;&nbsp;<a href="/mails/ebayinboxsubject/detail?id=' . $subject_model->id . '" target="_blank">查看</a>');
            } else {
                $model->setAttribute('message', '暂无');
            }
            //$model->account_id = Account::getAccountName($model->account_id, 'EB');

            //设置差评原因
            if (!empty($model->reason_id) && array_key_exists($model->reason_id, $allConfig)) {
                $model->reason_id = '<span style="cursor:pointer;" data="' . $model->id . '" data1="1" data3="' . $model->reason_id . '" data4="' . (!empty($model->department_id) ? $model->department_id : '') . '" class="not-set" data-toggle="modal" data-target="#myModal">' . $allConfig[$model->reason_id] . '</span>';
            } else {
                $model->reason_id = '<span style="cursor:pointer;" data="' . $model->id . '" data1="1" data3="' . $model->reason_id . '" data4="' . (!empty($model->department_id) ? $model->department_id : '') . '" class="not-set" data-toggle="modal" data-target="#myModal">(未设置)</span>';
            }

            //差评根据状态
            if (!empty($model->step_id) && array_key_exists($model->step_id, $allConfig)) {
                $model->step_id = '<span style="cursor:pointer;" data="' . $model->id . '" data1="2" data2="' . $model->step_id . '" class="not-set" data-toggle="modal" data-target="#myModal">' . $allConfig[$model->step_id] . '</span>';
            } else {
                $model->step_id = '<span style="cursor:pointer;" data="' . $model->id . '" data1="2" data2="' . $model->step_id . '" class="not-set" data-toggle="modal" data-target="#myModal">(未跟进)</span>';
            }

            //设置责任归属部门
            if (!empty($model->department_id) && array_key_exists($model->department_id, $allConfig)) {
                $model->department_id = $allConfig[$model->department_id];
            } else {
                $model->department_id = '';
            }

            //产品价格
            $model->item_price = $model->item_price . " " . $model->currency;

            //备注
            $model->remark = '<span id="remark_' . trim($model->id) . '">' . $model->remark . '</span>';

        }
        $platform_order_info = OrderEbay::getExtraInfo($platform_order_id_arr);
        foreach ($models as &$model_) {
            foreach ($platform_order_info as $v) {
                if ($model_->platform_order_id_old == $v['platform_order_id']) {
                    $model_->warehouse_id = $v['warehouse_id'];
                    $model_->ship_code = $v['ship_code'];
                    $model_->ship_country = $v['ship_country'];
                    $model_->shipped_date = $v['shipped_date'];
                    $model_->location = $v['location'];
                    $model_->warehouse = isset($model_->warehouse_id) && (int)$model_->warehouse_id > 0 ? $warehouseList[$model_->warehouse_id] : null;  //发货仓库
                    $model_->logistics = isset($model_->ship_code) ? Logistic::getSendGoodsWay($model_->ship_code) : null; //发货方式
                    $model_->ship_country = $model_->ship_country . (array_key_exists($model_->ship_country, $countryList)
                            ? '(' . $countryList[$model_->ship_country] . ')' : '');
                    $model_->pay_time = $v['paytime'];
                }
            }
        }
        foreach ($models as $model) {
            $account_info = Account::getAccountNameAndShortName($model->account_id, 'EB');
            $order_id = isset($account_info->account_short_name) ? $account_info->account_short_name . '--' : '';
            $order_result = OrderEbay::getOrderId($model->platform_order_id_old);
            $model->eb_order_id = $order_id . '<br />' . $order_result;
            $model->setAttribute('commenting_user_score', '评分：' . $model->commenting_user_score . '<br/>级别：' . $model->comment_type . '<br/>内容：' . $model->comment_text);
            $model->setAttribute('department_id', $model->department_id . '<br/>' . $model->reason_id);
            $model->setAttribute('step_id', $model->step_id . '<br/>' . $model->remark);
            $model->setAttribute('logistics', $model->logistics . '<br/>' . $model->warehouse);
            $model->setAttribute('ship_country', $model->ship_country . '<br/>' . $model->location);
            $model->setAttribute('time_list', '评论：' . $model->comment_time . '<br/>发货：' . $model->shipped_date . '<br/>付款：' . $model->pay_time);
        }
    }

    // 修改状态的显示
    protected function statusShow($status, $feedback_id)
    {
        switch ($status) {
            case 0:
                return '否';
            case 1:
                return '标记回复';
            case 2:
                return '<a href="javascript:void(0)" onclick="getrepliedmessage(' . $feedback_id . ')" color ="green">已回复</a>';
        }
    }

    public function filterOptions()
    {
        return [
            [
                'name' => 'feedback_id',
                'type' => 'text',
                'search' => '='
            ],
            [
                'name' => 'order_id',
                'type' => 'text',
                'search' => '=',
            ],
            [
                'name' => 'commenting_user',
                'type' => 'text',
                'search' => '='
            ],
            [
                'name' => 'comment_type',
                'type' => 'dropDownList',
                'data' => self::$commentTypeMap,
                'value' => '2',
                'search' => '='
            ],
            [
                'name' => 'item_id',
                'type' => 'text',
                'search' => '='
            ],
            [
                'name' => 'status',
                'type' => 'dropDownList',
                'data' => ['0' => '否', '1' => '标记回复', '2' => '已回复'],
                'value' => '0',
            ],
            [
                'name' => 'department_id',
                'type' => 'search',
                'data' => BasicConfig::getParentList(52),
                'search' => '='
            ],
            [
                'name' => 'reason_id',
                'type' => 'search',
                'data' => BasicConfig::getParentList(1),
                'search' => '=',
            ],
            [
                'name' => 'step_id',
                'type' => 'search',
                'data' => BasicConfig::getParentList(5),
                'search' => '='
            ],
            [
                'name' => 'account_id',
                'type' => 'search',
                'data' => Account::getIdNameKVList(Platform::PLATFORM_CODE_EB),
                'search' => '='
            ],
            [
                'name' => 'order_line_item_id',
                'type' => 'text',
                'search' => '='
            ],
            [
                'name' => 'sku',
                'type' => 'text',
                'search' => '='
            ],
            [
                'name' => 'start_time',
                'type' => 'date_picker',
                'search' => '<',
            ],
            [
                'name' => 'end_time',
                'type' => 'date_picker',
                'search' => '>',
            ],
        ];
    }

    /**
     * @desc 获取评论等级
     * @param  string 交易号ID
     * @param  string 交易号ID
     * @return int
     */
    public static function getCommentByTransactionID($transaction_id, $item_id)
    {
        $order_line_item_id = $item_id . '-' . $transaction_id;
        $comment = self::find()->where(['order_line_item_id' => $order_line_item_id, 'role' => 1])->one();
        if ($comment)
            return $comment;
        else
            return 0;
    }

    /**
     * @param $platform_code
     * @param $account
     * @param $user_name
     * 按平台统计好评差评数
     */
    public static function getFeedbackPlatform($month_date, $comment_type)
    {

        // 只能查询到客服绑定账号的回复
        $accountIds = UserAccount::getCurrentUserPlatformAccountIds(Platform::PLATFORM_CODE_EB);
        $data = [];
        foreach ($month_date as $key => $item) {
            $query = self::find()
                ->andWhere(['between', 'comment_time', $item['start_time'], $item['end_time']])
                ->andWhere(['comment_type' => $comment_type]);
            if(!empty($accountIds)){
                $query->andWhere(['in','account_id',$accountIds]);
            }
            $query->andWhere(['role' => 1]);
            $data[$key] = $query->count();
        }

        return $data;


    }

    /**
     * @param $month_date
     * @param $comment_type
     * @param $account
     * 按账号统计好评,差评率
     */
    public static function getFeedbackAccount($month_date, $comment_type, $account_ids)
    {
        $data = [];

        $init = [];

        $feedback = 0;
        $feedback1 = 0;
        if (!empty($account_ids)) {
            $account_info = Account::find()->select('id,account_name')->andWhere(['platform_code' => 'EB'])->andWhere(['in', 'id', $account_ids])->andWhere(['status' => 1])->asArray()->all();
        } else {
            $account_info = Account::find()->select('id,account_name')->andWhere(['platform_code' => 'EB'])->andWhere(['status' => 1])->asArray()->all();
        }
        $result = [];
        foreach ($account_info as $key => $value) {
            $result[$value['account_name']] = $value['id'];
        }
        $account = array_values($result);
        foreach ($result as $key => $value) {
            $init[$key] = 0;
        }

        if ($comment_type == 2) {
            $type = 4;
        } else {
            $type = 2;
        }

        foreach ($month_date as $key => $item) {
            $data[$key] = $init;
            $query = self::find()
                ->select('t1.account_name, count(t.id) as time')
                ->from('{{%ebay_feedback}} t')
                ->join('LEFT JOIN', '{{%account}} t1', 't.account_id = t1.id')
                ->andWhere(['between', 't.comment_time', $item['start_time'], $item['end_time']])
                ->andWhere(['t.comment_type' => $comment_type])
                ->andWhere(['t.role' => 1]);
            if (!empty($account)) {
                $query = $query->andWhere(['in', 't.account_id', $account]);
            }
            $query = $query->groupBy('t.account_id')
                ->orderBy('time DESC')
                ->asArray()
                ->all();

            $query1 = self::find()
                ->select('t1.account_name, count(t.id) as time')
                ->from('{{%ebay_feedback}} t')
                ->join('LEFT JOIN', '{{%account}} t1', 't.account_id = t1.id')
                ->andWhere(['between', 't.comment_time', $item['start_time'], $item['end_time']])
                ->andWhere(['t.comment_type' => $type])
                ->andWhere(['t.role' => 1]);
            if (!empty($account)) {
                $query1 = $query1->andWhere(['in', 't.account_id', $account]);
            }
            $query1 = $query1->groupBy('t.account_id')
                ->orderBy('time DESC')
                ->asArray()
                ->all();

            if (!empty($query)) {
                $result1 = array_column($query, 'time', 'account_name');
                $result2 = array_column($query1, 'time', 'account_name');

                if (!empty($result)) {
                    foreach ($result as $kk => $vv) {
                        $result3 = $result1[$kk] + $result2[$kk];
                        if (array_key_exists($kk, $result1) && array_key_exists($kk, $result2) && !empty($result3)) {
                            $feedback += $result3;
                            $feedback1 += $result1[$kk];
                            $data[$key][$kk] = round($result1[$kk] / $result3, 4) * 100;
                        }
                    }
                }
            }
            if(!empty($data[$key])){
                $tmp = $data[$key];
                arsort($tmp);
                $data[$key] = $tmp;
            }

        }
        $res = ['data' => $data, 'feedback' => $feedback, 'feedback1' => $feedback1];
        return $res;
    }

    /**
     * @param $month_date
     * @param $comment_type
     * @param $user_name
     * 按客服统计评价率
     */
    public static function getFeedbackKefu($month_date, $comment_type, $user_name)
    {
        $data = [];

        $feedback = 0;
        $feedback1 = 0;
        if (!empty($user_name)) {
            $user_id = (new Query())->select('id')->from('{{%user}}')->where(['user_name' => $user_name])
                ->createCommand(\Yii::$app->db_system)
                ->queryColumn();
            $account_info = (new Query())
                ->select('t1.user_name, t.account_ids')
                ->from('{{%orderservice}} as t')
                ->join('LEFT JOIN', '{{%user}} t1','t.user_id = t1.id')
                ->where(['t.user_id' => $user_id, 't.platform_code' => 'EB'])
                ->createCommand(\Yii::$app->db_system)
                ->queryAll();
        } else {
            $account_info = (new Query())
                ->select('t1.user_name, t.account_ids')
                ->from('{{%orderservice}} as t')
                ->join('LEFT JOIN', '{{%user}} t1','t.user_id = t1.id')
                ->where(['t.platform_code' => 'EB'])
                ->createCommand(\Yii::$app->db_system)
                ->queryAll();
        }

        $result = [];
        foreach ($account_info as $key => $value){
            if(!empty($value['account_ids'])){
                $arr = explode(',',$value['account_ids']);
                $result[$value['user_name']] = Account::find()->select('id')->where(['in','old_account_id',$arr])->column();
            }
        }

        if ($comment_type == 2) {
            $type = 4;
        } else {
            $type = 2;
        }


        foreach ($month_date as $key => $item) {
            foreach ($result as $kk => $vv) {
                $query = self::find()
                    ->select('count(id) as cnt')
                    ->from('{{%ebay_feedback}}')
                    ->andWhere(['between', 'comment_time', $item['start_time'], $item['end_time']])
                    ->andWhere(['comment_type' => $comment_type])
                    ->andWhere(['role' => 1]);
                if (!empty($vv)) {
                    $query = $query->andWhere(['in', 'account_id', $vv]);
                }
                $res[$key][$kk] = $query->orderBy('cnt DESC')
                    ->asArray()
                    ->one()['cnt'];

                $query1 = self::find()
                    ->select('count(id) as cnt')
                    ->from('{{%ebay_feedback}}')
                    ->andWhere(['between', 'comment_time', $item['start_time'], $item['end_time']])
                    ->andWhere(['comment_type' => $type])
                    ->andWhere(['role' => 1]);
                if (!empty($vv)) {
                    $query1 = $query1->andWhere(['in', 'account_id', $vv]);
                }
                $res1[$key][$kk] = $query1->orderBy('cnt DESC')
                    ->asArray()
                    ->one()['cnt'];

            }
            if (!empty($result)) {
                foreach ($result as $kkk => $vvv) {
                    $zong_feedback = $res[$key][$kkk] + $res1[$key][$kkk];
                    $feedback += $zong_feedback;
                    $feedback1 += $res[$key][$kkk];
                    if (!empty($zong_feedback)) {
                        $data[$key][$kkk] = round( $res[$key][$kkk]/ $zong_feedback, 4) * 100;
                    } else {
                        $data[$key][$kkk] = 0;
                    }

                }


            }
            if(!empty($data[$key])){
                $tmp = $data[$key];
                arsort($tmp);
                $data[$key] = $tmp;
            }
        }

        $res = ['data' => $data, 'feedback' => $feedback, 'feedback1' => $feedback1];
        return $res;

    }

    /**
     * @param $month_date
     * @param $user_name
     * 数据导出
     */
    public static function getExcelDate($month_date, $user_name)
    {

        if ($user_name != 'null') {
            $user_id = (new Query())->select('id')->from('{{%user}}')->where(['user_name' => $user_name])
                ->createCommand(\Yii::$app->db_system)
                ->queryColumn();
            $account_info = (new Query())
                ->select('t1.user_name, t.account_ids')
                ->from('{{%orderservice}} as t')
                ->join('LEFT JOIN', '{{%user}} t1','t.user_id = t1.id')
                ->where(['t.user_id' => $user_id, 't.platform_code' => 'EB'])
                ->createCommand(\Yii::$app->db_system)
                ->queryAll();
        } else {
            $account_info = (new Query())
                ->select('t1.user_name, t.account_ids')
                ->from('{{%orderservice}} as t')
                ->join('LEFT JOIN', '{{%user}} t1','t.user_id = t1.id')
                ->where(['t.platform_code' => 'EB'])
                ->createCommand(\Yii::$app->db_system)
                ->queryAll();
        }

        $result = [];
        foreach ($account_info as $key => $value){
            if(!empty($value['account_ids'])){
                $arr = explode(',',$value['account_ids']);
                $result[$value['user_name']] = Account::find()->select('id')->where(['in','old_account_id',$arr])->column();
            }
        }
        $res = [];

        foreach ($result as $k => $item) {
            $res[$k] = array(
                'res_postive' => 0,
                'res_postive_rate' => 0,
                'res_negative' => 0,
                'res_negative_rate' => 0,
                'res_zong' => 0,
            );
            $query = self::find()
                ->select('count(id) as cnt')
                ->from('{{%ebay_feedback}}')
                ->andWhere(['between', 'comment_time', $month_date['start_time'], $month_date['end_time']])
                ->andWhere(['comment_type' => 4])
                ->andWhere(['role' => 1]);
            if (!empty($item)) {
                $query = $query->andWhere(['in', 'account_id', $item]);
            }
            $res[$k]['res_postive'] = $query->orderBy('cnt DESC')
                ->asArray()
                ->one()['cnt'];

            $query1 = self::find()
                ->select('count(id) as cnt')
                ->from('{{%ebay_feedback}}')
                ->andWhere(['between', 'comment_time', $month_date['start_time'], $month_date['end_time']])
                ->andWhere(['comment_type' => 2])
                ->andWhere(['role' => 1]);
            if (!empty($item)) {
                $query1 = $query1->andWhere(['in', 'account_id', $item]);
            }
            $res[$k]['res_negative'] = $query1->orderBy('cnt DESC')
                ->asArray()
                ->one()['cnt'];

            $res[$k]['res_zong'] = $res[$k]['res_postive'] + $res[$k]['res_negative'];
            if(!empty($res[$k]['res_zong'])){
                $res[$k]['res_postive_rate'] =  round( $res[$k]['res_postive']/ $res[$k]['res_zong'], 4) * 100 .'%';
                $res[$k]['res_negative_rate'] = round( $res[$k]['res_negative']/ $res[$k]['res_zong'], 4) * 100 . '%';
            }else{
                $res_postive_rate[$k] = 0;
                $res_negative_rate[$k] = 0;
            }

        }
       return $res;
    }
}